name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Create preview directory
        run: |
          mkdir -p preview/pr-${{ github.event.number }}
          cp -r * preview/pr-${{ github.event.number }}/ 2>/dev/null || true
          # Remove the preview directory from being copied into itself
          rm -rf preview/pr-${{ github.event.number }}/preview

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./preview

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ“– Preview deployed')
            );
            
            const previewUrl = `${{ steps.deployment.outputs.page_url }}pr-${{ github.event.number }}/`;
            const body = `ðŸ“– **Preview deployed!**
            
You can preview the changes from this PR at: ${previewUrl}

This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }